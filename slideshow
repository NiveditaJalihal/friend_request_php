using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Security.Cryptography;


namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {

            //Console.WriteLine("please enter user name");
            //string namee = Console.ReadLine();
            //Console.WriteLine("please enter password");



            //string plaintext = Console.ReadLine();


            Program p = new Program();
            //string inp = p.Encrypt(plaintext);
            //string res = p.Decrypt(inp);





            SqlConnection con = new SqlConnection("data source=.;database=student;integrated security=true;");
            SqlCommand cmd = new SqlCommand();

            //cmd.Parameters.AddWithValue("@val", inp);
            //cmd.Parameters.AddWithValue("@name", namee);
            //cmd.CommandText = "insert into checkwa values(@val,@name)";
            //con.Open();
            //cmd.Connection = con;
            //cmd.ExecuteNonQuery();
            //con.Close();
            //Console.WriteLine("please enter password to verify");

            //string verfiy = Console.ReadLine();
            Console.WriteLine("Enter user name");
            string name = Console.ReadLine();
            Console.WriteLine("enter password");
            string pwd = Console.ReadLine();




            con.Open();
            cmd.CommandText = "select * from checkwa where name=@name";
            cmd.Parameters.AddWithValue("@name", name);
            //cmd.Parameters.AddWithValue("@pwd", pwd);
            cmd.Connection = con;
            SqlDataReader rd = cmd.ExecuteReader();
            int flag = 0;
            while (rd.Read())
            {
                string match = Convert.ToString(rd[1]);
                string namewa=Convert.ToString(rd[2]);
                string result = p.Decrypt(match);
                if (pwd.Equals(result) && name.Equals(namewa))
                {
                    Console.WriteLine("successfulluy login ");
                    flag = 1;
                    break;
                }


            }
            con.Close();
            if (flag == 0)
                Console.WriteLine("match not found");

        }
        public string Encrypt(string plainText)
        {
            if (plainText == null) throw new ArgumentNullException("plainText");

            //encrypt data
            var data = Encoding.Unicode.GetBytes(plainText);
            byte[] encrypted = ProtectedData.Protect(data, null, DataProtectionScope.LocalMachine);

            //return as base64 string
            return Convert.ToBase64String(encrypted);
        }
        public string Decrypt(string cipher)
        {
            if (cipher == null) throw new ArgumentNullException("cipher");

            //parse base64 string
            byte[] data = Convert.FromBase64String(cipher);

            //decrypt data
            byte[] decrypted = ProtectedData.Unprotect(data, null, DataProtectionScope.LocalMachine);
            return Encoding.Unicode.GetString(decrypted);
        }

    }
}
